<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>wsl 借助 anaconda 配置 volatility</title>
    <link href="/2023/07/30/misc-2/"/>
    <url>/2023/07/30/misc-2/</url>
    
    <content type="html"><![CDATA[<p>短学期课程中 <code>misc</code> 模块的一道题目，也是初次见识到 <code>conda</code>环境管理的威力，之后大概会借助其重构 <code>wsl</code>. </p><span id="more"></span><style>    .markdown-body {    font-family: "思源宋体 Light","Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style><h2 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h2><p>配置好相关 python 环境，成功运行 volatility 2.6 版本，并复现例题。要求：</p><ol><li><p>从官方 GitHub 下载 volatility 2 的源码（不要 volatility 3）；</p></li><li><p>直接在本机 &#x2F; 虚拟机 &#x2F; wsl 上配置环境，成功运行；</p></li><li><p>复现例题。</p></li></ol><p>给的提示里面有一条是 python 的环境管理推荐使用 conda （ miniconda 和 anaconda 都可以）。</p><p>于是就又开始了配环境之旅。</p><h2 id="安装-conda"><a href="#安装-conda" class="headerlink" title="安装 conda"></a>安装 conda</h2><p>笔者配置的环境还是在 wsl 下的，安装的是 anaconda<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[wsl 安装 anaconda](https://zhuanlan.zhihu.com/p/166102942)">[1]</span></a></sup>。</p><p>首先是从<a href="https://www.anaconda.com/download#downloads">官网</a>上下载对应架构的 Linux 版本，然后放进 wsl 下。<br>（应该也是可以从终端下下载的，但没捣鼓）</p><p>然后安装的话使用 bash filename 即可，filename 就是下载的版本名称。之后的要求全 yes 就行，只要记录一下 conda 的路径就行，因为要用于添加进环境变量中。然后笔者因为已经配置了 zsh ，所以就是 vim ~&#x2F;.zshrc ，然后添加 export PATH &#x3D; $anaconda_path 就好了。</p><h2 id="创建-volatility-环境"><a href="#创建-volatility-环境" class="headerlink" title="创建 volatility 环境"></a>创建 volatility 环境</h2><p>volatility 2.6 要求的环境是 python &#x3D; 2.9 及以上，但不能是 python 3.x ，但我们现在正常安装的都是 python 3.x ，如果这二者放在一块会有奇怪的错误发生，而 conda 提供了创建隔离的虚拟环境的命令，即 conda create -n env_name python&#x3D;python_version ，这样就可以互不干扰了。执行命令后可以用 conda info -e 列出所有的环境，而 conda list 可以列出该环境下所有的包。默认进入是 base 环境，想进入其他环境就需要 conda activate env_name ，退出则是 conda deactivate，且 base 环境也是可以退出的。</p><p>先把 volatility 的源码下载下来，观察一下，发现没有 volatility 名称的可执行文件，只有名为 vol.py 的文件，所以命令中的 volatility 均被替换成了 vol.py，然后补齐依赖包，可以先跑个命令看看报错，再下包。pycrypto 是 conda 下的，因为是 wsl，用的是 pycrypto 而不是 pycryptodemo，distorm3 是 pip 下的，因为 python2 下 pip 可以直接在 wsl 里面下，conda 不行。至此，需要的环境就基本上搭建完成了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>conda 的环境管理确实十分强大，而一想起自己之前混乱的的环境管理和包安装就十分汗颜，所以会考虑重装一下 wsl ，<del>到时候重配 zsh 的话应该又能水水了</del>。不过 conda 的使用也有点小问题，比如在 base 环境下它也无法识别 sage ，或许是因为 sage 不仅仅是一个包这么简单，但这使得我必须退出 base 环境才能运行，而且 vscode 还会抽风，之后摸索摸索看能不能解决一下。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/166102942">wsl 安装 anaconda</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>借助 Clash 设置 wsl 的终端代理</title>
    <link href="/2023/07/24/misc-1/"/>
    <url>/2023/07/24/misc-1/</url>
    
    <content type="html"><![CDATA[<p>借助此次短学期，将代理换成了 <code>Clash + ZJU Rule + ZJU Connect</code>，并且实现了 <code>wsl</code> 的终端代理，拥有了更畅快的科学上网体验！</p><span id="more"></span><style>    .markdown-body {    font-family: "思源宋体 Light","Microsoft YaHei",Georgia, sans, serif;    font-size: 15px;  }</style><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>这几天上完短学期课程回家，虽然课程结束但是 lab 和 report 并没有结束。于是开始跑之前写好的程序，准备截几张图放进 report 里，结果发现……有一道题跑不通了TT</p><p>那题是校内平台上的，得要内网访问，转头看了一眼课程群，发现也有同学有相同的问题，4 老师建议使用 tun2socks, proxychains4 等软件。于是笔者尝试捣鼓了一下 proxychains4，不出意料的失败了。因为之前有过设置 wsl 终端代理失败的诸多痛苦经历，笔者对此已经是见怪不怪，但是 report 的截图迟迟没有着落，笔者也很想设置好 wsl 的终端代理来减少 wsl 内下包下不下来一直失败的情况，正好班群里 lhjgg 提到他都是把 Clash 的 TUN Mode 打开来实现 wsl 的终端代理，在双重压力之下，笔者又开始了配环境的旅程。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>前排提醒：笔者为 Win 11 系统，使用的是 wsl2 。</p><p>笔者以前科学上网用的是 ShadowsocksR(ssr) ，要转成 Clash 略有麻烦，所幸校内论坛里有前辈已经铺好了路，按着走就行。</p><ul><li><p>安装 Clash</p><p>这个别下错架构，以及挑个网好的时候就行了。</p></li><li><p>安装 ZJU Connect<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ZJU Connect repo](https://github.com/Mythologyli/ZJU-Connect)">[1]</span></a></sup></p><p>别惦记着你那 Easy Connect 了，对自己（的电脑）好点。</p></li></ul><h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><ul><li><p>应用 ZJU Rule<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ZJU Rule repo](https://github.com/Mythologyli/ZJU-Rule)">[2]</span></a></sup></p><p>这个服务本质上是使用论坛前辈已经部署好的 subconverter 实现订阅链接的转换，并加入分组分流的信息。<br>ZJU Connect 的链接在 ZJU Connect for Windows 的高级选项内有，直接复制过去一起给 ZJU Rule 转换就行。<br>然后从 Clash 上 download 下来，ZJU 内网和 ZJU More Scholar 的节点切换为 ZJU Connect 即可。</p></li><li><p>开启 TUN Mode</p><p>那么就到设置 wsl 终端代理了。但为啥这个 TUN Mode 就能做到呢？这里引一下 Clash 的文档<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Clash TUN Mode](https://docs.cfw.lbyczf.com/contents/tun.html)">[3]</span></a></sup>。</p><blockquote><p>对于不遵循系统代理的软件，TUN 模式可以接管其流量并交由 CFW 处理</p></blockquote><p>CFW 就是 Clash for Windows，笔者猜想是正常的代理都没法代理 wsl，即 wsl 就是那种不遵循系统代理的软件，那么 TUN Mode 正适合它。</p><p>开启过程在文档内都有，就不赘述了。<br>不过开启 TUN Mode 需要先安装 Service Mode，笔者有个同学和笔者是相同的配置，却并没有成功，仔细一问是 Service Mode 没装。</p><img src="/2023/07/24/misc-1/01.png" class="" title="ac01"></li></ul><h2 id="过程总结"><a href="#过程总结" class="headerlink" title="过程总结"></a>过程总结</h2><p>整体上的流程就是安装好 Clash，然后有学校内网的 rvpn 和机场的订阅链接，将它们利用 subconverter 转换为 Clash 的链接，最后开启 TUN Mode 就行了。前辈把路搭好的话问题确实不大，但要是从零开始实现的话感觉还是相当困难的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/Mythologyli/ZJU-Connect">ZJU Connect repo</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/Mythologyli/ZJU-Rule">ZJU Rule repo</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://docs.cfw.lbyczf.com/contents/tun.html">Clash TUN Mode</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Science</tag>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
